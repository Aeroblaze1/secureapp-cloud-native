// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  roleId       Int
  role         Role     @relation(fields: [roleId], references: [id])
  // optional: refresh tokens, profiles, etc.

  // Relation to resources
  resources    Resource[] // <-- this is the opposite field

  UserProfile UserProfile[]
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  users       User[]
  permissions RolePermission[]
}

model Permission {
  id          Int              @id @default(autoincrement())
  resource    String
  action      String
  description String?
  roles       RolePermission[]

  @@unique([resource, action])
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@unique([roleId, permissionId])
}

model TokenBlacklist {
  id        Int      @id @default(autoincrement())
  jti       String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  reason    String?
}

model Resource {
  id          Int      @id @default(autoincrement())
  name        String
  type        String
  ownerId     Int
  owner       User     @relation(fields: [ownerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  bio       String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
